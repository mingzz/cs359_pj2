#/* $begin ncopy-ys */
##################################################################
# ncopy.ys - Copy a src block of len ints to dst.
# Return the number of positive ints (>0) contained in src.
#
# Include your name and ID here.
#
# Describe how and why you modified the baseline code.
#
##################################################################
# Do not modify this portion
# Function prologue.
ncopy:	pushl %ebp		# Save old frame pointer
	rrmovl %esp,%ebp	# Set up new frame pointer
	pushl %esi		# Save callee-save regs
	pushl %ebx
	pushl %edi
	mrmovl 8(%ebp),%ebx	# src
	mrmovl 16(%ebp),%edx	# len
	mrmovl 12(%ebp),%ecx	# dst

##################################################################
# You can modify this portion
	# Loop header
	xorl %eax,%eax		# count = 0;
	andl %edx,%edx		# len <= 0?
	jle Done		# if so, goto Done:
	iaddl $-4, %edx		# len = len - 4
	jl Remainder

Loop:	mrmovl (%ebx), %esi	# read val from src...
	mrmovl 4(%ebx), %edi	# pre-read src+4 to AVOID RAW hazard
	rmmovl %esi, (%ecx)	# ...and store it to dst
	andl %esi, %esi		# val <= 0?
	jle Npos0		# if so, goto Npos:
	iaddl $1, %eax  	# count++
Npos0:
	mrmovl 8(%ebx), %esi	# pre-read src+8
	rmmovl %edi, 4(%ecx)
	andl %edi, %edi
	jle Npos1
	iaddl $1, %eax
Npos1:
        mrmovl 12(%ebx), %edi	# pre-read src+12
        rmmovl %esi, 8(%ecx)
        andl %esi, %esi
        jle Npos2
        iaddl $1, %eax
Npos2:
        rmmovl %edi, 12(%ecx)
        andl %edi, %edi
        jle Next 
        iaddl $1, %eax
Next:
	iaddl $16, %ebx		# src++
	iaddl $16, %ecx		# dst++
	iaddl $-4, %edx		# (len -= 4) >= 0?
	jge Loop		# if so, goto Loop:

Remainder:
	iaddl $4, %edx		# resume len
Remain0:
	iaddl $-1, %edx
	jl Done
	mrmovl (%ebx), %esi	# read val from src[0]
	mrmovl 4(%ebx), %edi	# pre-read val from src[1]
	rmmovl %esi, (%ecx)
	andl %esi, %esi
  	jle Remain1
  	iaddl $1, %eax
Remain1:
	iaddl $-1, %edx
	jl Done
	mrmovl 8(%ebx), %esi	# read val form src[2]
        rmmovl %edi, 4(%ecx)	# src[1] has been read in Pos0
        andl %edi, %edi
        jle Remain2
        iaddl $1, %eax
Remain2:
	iaddl $-1, %edx
	jl Done
	rmmovl %esi, 8(%ecx)	# src[2] has been read in Pos1
	andl %esi, %esi
	jle Done
	iaddl $1, %eax	
##################################################################
# Do not modify the following section of code
# Function epilogue.
Done:
	popl %edi               # Restore callee-save registers
	popl %ebx
	popl %esi
	rrmovl %ebp, %esp
	popl %ebp
	ret
##################################################################
# Keep the following label at the end of your function
End:
#/* $end ncopy-ys */
