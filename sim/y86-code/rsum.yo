                      | # Execution begins at address 0
  0x000:              |         .pos 0
  0x000: 30f400010000 | init:   irmovl Stack, %esp      # Set up Stack pointer
  0x006: 30f500010000 |         irmovl Stack, %ebp      # Set up base pointer
  0x00c: 702c000000   |         jmp Main                # Execute main program
                      | 
                      | 
                      | # sample linked list
  0x014:              | .align 4
  0x014:              | ele1:
  0x014: 0a000000     |         .long 0x00a
  0x018: 1c000000     |         .long ele2
  0x01c:              | ele2:
  0x01c: b0000000     |         .long 0x0b0     
  0x020: 24000000     |         .long ele3
  0x024:              | ele3:
  0x024: 000c0000     |         .long 0xc00
  0x028: 00000000     |         .long 0
                      | 
                      | 
                      | 
  0x02c: 30f014000000 | Main:   irmovl ele1,%eax
  0x032: a00f         |         pushl %eax      # ptr to linked list
  0x034: 803a000000   |         call rsum_list
  0x039: 00           |         halt
                      | 
  0x03a: a05f         | rsum_list:	pushl %ebp
  0x03c: 2045         | 		rrmovl %esp, %ebp
  0x03e: a01f         | 		pushl %ecx
  0x040: 30f604000000 | 		irmovl $4, %esi
  0x046: 30f000000000 | 		irmovl $0, %eax
  0x04c: 502508000000 | 		mrmovl 8(%ebp), %edx 	# edx = ls
  0x052: 6222         | 		andl %edx, %edx 	# if(!ls)
  0x054: 736a000000   | 		je End
  0x059: 501200000000 | 		mrmovl (%edx), %ecx	# Get *ls
  0x05f: 6062         | 		addl %esi, %edx 	# ls = ls->next
  0x061: a02f         | 		pushl %edx		# save current head
  0x063: 803a000000   | 		call rsum_list
  0x068: 6010         | 		addl %ecx, %eax		# val + rest
                      | 
  0x06a:              | End:
  0x06a: b02f         | 		popl %edx
  0x06c: b01f         | 		popl %ecx
  0x06e: b05f         | 		popl %ebp
  0x070: 90           | 		ret
                      | 
  0x100:              | 	.pos 0x100
  0x100:              | Stack:	# The stack goes here
