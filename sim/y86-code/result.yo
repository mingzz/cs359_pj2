                      | # Execution begins at address 0
  0x000:              | 	.pos 0
  0x000: 30f400010000 | init:	irmovl Stack, %esp  	# Set up Stack pointer
  0x006: 30f500010000 | 	irmovl Stack, %ebp  	# Set up base pointer
  0x00c: 702c000000   | 	jmp Main		# Execute main program
                      | 
                      | # Sample linked list
  0x014:              | .align 4
  0x014:              | ele1:	
  0x014: 0a000000     | 	.long 0x00a
  0x018: 1c000000     | 	.long ele2
  0x01c:              | ele2:	
  0x01c: b0000000     | 	.long 0x0b0
  0x020: 24000000     | 	.long ele3
  0x024:              | ele3:	
  0x024: 000c0000     | 	.long 0xc00
  0x028: 00000000     | 	.long 0
                      | 
                      | 
  0x02c: 30f014000000 | Main:	irmovl 	ele1,%eax
  0x032: a00f         | 	pushl 	%eax      		# Push ele1
  0x034: 803a000000   | 	call 	rsum_list		# rsum_list(ele1)
  0x039: 00           | 	halt
                      | 
                      | /* $begin sum-ys 0 */
                      | 	# int rsum_list(int *list)
  0x03a:              | rsum_list:	
  0x03a: a05f         | 	pushl 	%ebp
  0x03c: 2045         | 	rrmovl 	%esp,%ebp
  0x03e: a06f         | 	pushl	%esi			# save register %esi
  0x040: 502508000000 | 	mrmovl 	8(%ebp),%edx 		# %edx = ele1
  0x046: 30f000000000 | 	irmovl 	$0, %eax		# #eax = sum = 0
  0x04c: 6222         | 	andl   	%edx,%edx		# if ele = 0,return 0
  0x04e: 736a000000   | 	je     	End
  0x053: 506200000000 | 	mrmovl 	(%edx),%esi      	# %esi = *list
  0x059: 502204000000 | 	mrmovl 	4(%edx),%edx 		# %edx = list.next
  0x05f: a02f         | 	pushl	%edx			# Push ele
  0x061: 803a000000   | 	call 	rsum_list		# rsum_list(ele)
  0x066: b02f         | 	popl	%edx
  0x068: 6060         | 	addl 	%esi,%eax          	# add to sum
  0x06a:              | End:	
  0x06a: b06f         | 	popl	%esi
  0x06c: b05f         | 	popl 	%ebp
  0x06e: 90           | 	ret
                      | /* $end sum-ys 0 */
  0x100:              | 	.pos 0x100
  0x100:              | Stack:	# The stack goes here
